--- 
- hosts: localhost
  connection: local 
  gather_facts: False 
  tasks:
    - name: Import VPC variables file
      include_vars: vars/output_vars

    - name: Import EC2 AMI variables
      include_vars: vars/ec2_vars

    - name: Create key for EC2 stack instance
      ec2_key:
        name: ec2Stack_keyPair
        region: "{{region}}"
      register: ec2Stack_out

    - name: storing private key content
      copy:
        content: "{{ec2Stack_out.key.private_key}}"
        dest: ./ec2Stack-keyPair.pem
      when: ec2Stack_out.changed

    - name: Security group for Load Balancer
      ec2_group:
        name: ansibleLB_SG
        description: ansibleLB_SG 
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: ansibleLB_SG_out

    - name: Security group for EC2 instances
      ec2_group:
        name: ansibleEC2_SG
        description: ansibleEC2_SG 
        vpc_id: "{{vpcid}}"
        purge_rules: no
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ansibleLB_SG_out.group_id}}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register: ansibleEC2_SG_out
    
    - name: Update Security group for EC2 instances
      ec2_group:
        name: ansibleEC2_SG
        description: ansibleEC2_SG 
        vpc_id: "{{vpcid}}"
        purge_rules: no
        region: "{{region}}"
        rules:
          - proto: all
            group_id: "{{ansibleEC2_SG_out.group_id}}"

    - name: Create Nginx server web01
      ec2:
        key_name: ec2Stack_keyPair
        vpc_subnet_id: "{{privatesub1id}}"
        instance_type: t2.micro
        region: "{{region}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{ansibleEC2_SG_out.group_id}}"
        image: "{{nginx_ami}}"
        exact_count: 1
        instance_tags:
          Name: web01
        count_tag:
          Name: web01
      register: web01_out

    - name: Create Tomcat server app01
      ec2:
        key_name: ec2Stack_keyPair
        vpc_subnet_id: "{{privatesub1id}}"
        instance_type: t2.micro
        region: "{{region}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{ansibleEC2_SG_out.group_id}}"
        image: "{{tomcat_ami}}"
        exact_count: 1
        instance_tags:
          Name: app01
        count_tag:
          Name: app01
      register: app01_out

    - name: Create Memcached server mc01
      ec2:
        key_name: ec2Stack_keyPair
        vpc_subnet_id: "{{privatesub1id}}"
        instance_type: t2.micro
        region: "{{region}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{ansibleEC2_SG_out.group_id}}"
        image: "{{memcached_ami}}"
        exact_count: 1
        instance_tags:
          Name: mc01
        count_tag:
          Name: mc01
      register: mc01_out

    - name: Create RabbitMQ server rmq01
      ec2:
        key_name: ec2Stack_keyPair
        vpc_subnet_id: "{{privatesub1id}}"
        instance_type: t2.micro
        region: "{{region}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{ansibleEC2_SG_out.group_id}}"
        image: "{{rmq_ami}}"
        exact_count: 1
        instance_tags:
          Name: rmq01
        count_tag:
          Name: rmq01
      register: rmq01_out

    - name: Create MYSQL server db01
      ec2:
        key_name: ec2Stack_keyPair
        vpc_subnet_id: "{{privatesub1id}}"
        instance_type: t2.micro
        region: "{{region}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{ansibleEC2_SG_out.group_id}}"
        image: "{{mysql_ami}}"
        exact_count: 1
        instance_tags:
          Name: db01
        count_tag:
          Name: db01
      register: db01_out

    - debug: 
        var: db01_out.tagged_instances[0].id

    - name: Create Load Balancer in aws from ansible
      ec2_elb_lb:
        name: "ansibleLB"
        state: present
        region: "{{region}}"
        instance_ids:
          - "{{web01_out.tagged_instances[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{ansibleLB_SG_out.group_id}}"
        subnets: 
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: ansibleLB_out

    - name: Insert/Update EC2 instance id 
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: | 
          web01_ip: "{{web01_out.tagged_instances[0].private_ip}}"
          app01_ip: "{{app01_out.tagged_instances[0].private_ip}}"
          rmq01_ip: "{{rmq01_out.tagged_instances[0].private_ip}}"
          mc01_ip: "{{mc01_out.tagged_instances[0].private_ip}}"
          db01_ip: "{{db01_out.tagged_instances[0].private_ip}}"

    - name: storing private key content
      copy:
        src: ec2Stack-keyPair.pem
        dest: provision-stack/ec2Stack-keyPair.pem

    - name: Insert/Update Inventory file
      blockinfile:
        path: provision-stack/inventory-file
        block: | 
          web01 ansible_host: "{{web01_out.tagged_instances[0].private_ip}}"
          app01 ansible_host: "{{app01_out.tagged_instances[0].private_ip}}"
          rmq01 ansible_host: "{{rmq01_out.tagged_instances[0].private_ip}}"
          mc01 ansible_host: "{{mc01_out.tagged_instances[0].private_ip}}"
          db01 ansible_host: "{{db01_out.tagged_instances[0].private_ip}}"
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl  

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=ec2Stack-keyPair.pem
          #ansible_python_intrepreter=/usr/bin/python3  




